import logging
import os
import asyncio

import aiogram.utils.exceptions
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from data.config import BOT_TOKEN
from data.database.base import (add_user, update_user_class, check_user, check_user_class,
                                check_google_query, add_google_query, delete_google_query,
                                check_textbooks, check_textbook_url)
from data.functions import text_extract, translate_text, SUPPORTED_LANGUAGES, google_query, get_images_url
from data.states_groups.classes import ScanText, TranslationStates, GDZStates
from data.keyboards.main_menu import main_menu_kb
from data.keyboards.classes import classes_kb
from data.keyboards.subjects import class_9_subjects_kb, class_10_subjects_kb, class_11_subjects_kb

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user_id = message.from_user.id
    user_data = await check_user(user_id)

    if not user_data:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å:", reply_markup=keyboard)
        return

    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}",
                        reply_markup=main_menu_kb)


@dp.message_handler(commands=['help'])
@dp.message_handler(lambda message: message.text == "–ü–æ–º–æ—â—å ‚ùì")
async def help_command(message: types.Message):
    await message.reply("üîß –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n"
                        "/help ‚Äî –æ—Ç–∫—Ä—ã—Ç–∏–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                        "/scan_text ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
                        "/translate ‚Äî –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç —Å –æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–π\n"
                        "/search {–≤–∞—à –∑–∞–ø—Ä–æ—Å} ‚Äî –∑–∞–ø—Ä–æ—Å –≤ Google\n"
                        "/gdz ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –ì–î–ó –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞\n"
                        "/add_bot_to ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≤–∞—à—É –±–µ—Å–µ–¥—É\n"
                        "/change_class ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –∫–ª–∞—Å—Å\n"
                        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã\n\n"
                        f"üåê –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞:\n [ {', '.join(SUPPORTED_LANGUAGES)} ]\n\n"
                        "–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞: @xordeo\n"
                        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–µ–≥–æ –±–æ—Ç–∞! ‚ò∫", reply_markup=main_menu_kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
@dp.message_handler(lambda message: message.text in ["9", "10", "11"])
async def choose_class(message: types.Message):
    user_id = message.from_user.id
    user_data = await check_user(user_id)

    if not user_data:
        user_class = int(message.text)
        await add_user(user_id, user_class)
        await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í–∞—à –∫–ª–∞—Å—Å {user_class}-—ã–π.")
    else:
        new_class = int(message.text)
        await update_user_class(user_id, new_class)
        await message.answer(f"–í–∞—à –∫–ª–∞—Å—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_class}!")

    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}",
                        reply_markup=main_menu_kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞
@dp.message_handler(commands=['change_class'])
@dp.message_handler(lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å üéí")
async def change_class(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [types.KeyboardButton(text="9"), types.KeyboardButton(text="10"), types.KeyboardButton(text="11")]
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å:", reply_markup=classes_kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /scan_text
@dp.message_handler(commands=['scan_text'])
@dp.message_handler(Text(equals="–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç üì∏"))
async def scan_text_button(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton(text="/cancel"))
    await message.reply("–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã —è –º–æ–≥ –µ–≥–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.", reply_markup=keyboard)
    await ScanText.waiting_for_photo.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ
@dp.message_handler(content_types=types.ContentType.PHOTO, state=ScanText.waiting_for_photo)
async def handle_photo(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    photo = message.photo[-1]
    file_info = await bot.get_file(photo.file_id)
    file_path = file_info.file_path
    file = await bot.download_file(file_path)
    file_name = os.path.join("data/photos", f"{user_id}.jpg")

    with open(file_name, 'wb') as new_file:
        new_file.write(file.getvalue())
    text = await text_extract(file_name)
    await message.answer(text, reply_markup=main_menu_kb)
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /translate
@dp.message_handler(commands=['translate'])
@dp.message_handler(Text(equals="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç üåê"))
async def cmd_translate(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    for lang in SUPPORTED_LANGUAGES:
        keyboard.add(types.InlineKeyboardButton(text=lang, callback_data=f"source_language:{lang}"))

    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:", reply_markup=keyboard)
    await TranslationStates.choose_source_language.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
@dp.callback_query_handler(lambda c: c.data.startswith('source_language'),
                           state=TranslationStates.choose_source_language)
async def process_source_language(callback_query: types.CallbackQuery, state: FSMContext):
    source_language = callback_query.data.split(":")[1]
    await state.update_data(source_language=source_language)

    keyboard = types.InlineKeyboardMarkup()
    for lang in SUPPORTED_LANGUAGES:
        keyboard.add(types.InlineKeyboardButton(text=lang, callback_data=f"target_language:{lang}"))

    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id,
                                text="–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:",
                                reply_markup=keyboard)
    await TranslationStates.choose_target_language.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith('target_language'),
                           state=TranslationStates.choose_target_language)
async def process_target_language(callback_query: types.CallbackQuery, state: FSMContext):
    target_language = callback_query.data.split(":")[1]
    await state.update_data(target_language=target_language)

    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id,
                                text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:")
    await TranslationStates.translating.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
@dp.message_handler(state=TranslationStates.translating)
async def process_translation(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        source_language = data.get('source_language')
        target_language = data.get('target_language')

    if not source_language or not target_language:
        await message.reply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    text = await translate_text(message.text, source_language, target_language)

    await bot.send_message(chat_id=message.chat.id,
                           text=text)
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –±–µ—Å–µ–¥—É
@dp.message_handler(commands=['add_bot_to'])
@dp.message_handler(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –±–µ—Å–µ–¥—É üë•")
async def add_bot_to(message: types.Message):
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 2)
    except aiogram.utils.exceptions.MessageCantBeDeleted:
        pass
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –±–µ—Å–µ–¥—É üë•", url="https://t.me/xordeo_bot?startgroup=start"))
    await message.answer("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –±–µ—Å–µ–¥—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨á", reply_markup=keyboard)
    await message.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é ‚Ü©", reply_markup=main_menu_kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ google-–∑–∞–ø—Ä–æ—Å–∞
@dp.message_handler(lambda message: message.text == "–ó–∞–≥—É–≥–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å üîé")
async def google_question(message: types.Message):
    await message.answer("–ß—Ç–æ–±—ã –∑–∞–≥—É–≥–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø–∏—à–∏—Ç–µ:\n\n"
                         "/search {–≤–∞—à –∑–∞–ø—Ä–æ—Å}\n\n"
                         "–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –≤–≤–µ–¥–∏—Ç–µ /cancel\n"
                         "–í–∞–∂–Ω–æ: –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /cancel")


async def search_links(user_id, query):
    user_query = await check_google_query(user_id)
    if user_query[0] is None:
        get_google_query = await google_query(query)
        user_google_query = ", ".join(get_google_query)
        await add_google_query(user_id, user_google_query)
        user_google_query = await check_google_query(user_id)
        return user_google_query[0].split(", ")
    else:
        user_google_query = await check_google_query(user_id)
        return user_google_query[0].split(", ")


async def send_link(chat_id, index, links, user_id, reply_to_message_id):
    if not links:
        return  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç–æ–π, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º

    if not 0 <= index < len(links):
        return  # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = []
    if index > 0:
        buttons.append(types.InlineKeyboardButton(
            text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"backward_{index}_{user_id}_{reply_to_message_id}"))
    if index < len(links) - 1:
        buttons.append(types.InlineKeyboardButton(
            text="–í–ø–µ—Ä—ë–¥ ‚û°", callback_data=f"forward_{index}_{user_id}_{reply_to_message_id}"))
    keyboard.add(*buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ, –µ—Å–ª–∏ –æ–Ω–æ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    message_text = (f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã–π –æ—Ç–≤–µ—Ç:\n"
                    f"{links[index]}\n"
                    f"–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /cancel")
    if hasattr(send_link, 'last_message'):
        try:
            await bot.edit_message_text(message_text, chat_id, send_link.last_message.message_id, reply_markup=keyboard)
        except aiogram.utils.exceptions.MessageToEditNotFound:
            send_link.last_message = await bot.send_message(chat_id, message_text, reply_markup=keyboard,
                                                            reply_to_message_id=reply_to_message_id)
    else:
        send_link.last_message = await bot.send_message(chat_id, message_text, reply_markup=keyboard,
                                                        reply_to_message_id=reply_to_message_id)


@dp.message_handler(commands=['search'])
async def search_handler(message: types.Message):
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    except aiogram.utils.exceptions.MessageCantBeDeleted:
        pass
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 2)
    except aiogram.utils.exceptions.MessageCantBeDeleted:
        pass
    user_id = message.from_user.id
    await delete_google_query(user_id)
    query = message.get_args()
    links = await search_links(user_id, query)
    if links:
        await send_link(message.chat.id, 0, links, user_id, message.message_id)


@dp.callback_query_handler(lambda c: c.data.startswith(('forward', 'backward')))
async def callback_handler(callback_query: types.CallbackQuery):
    index = int(callback_query.data.split('_')[1])  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    links = await search_links(int(callback_query.data.split('_')[2]), "")
    await bot.answer_callback_query(callback_query.id)
    if not links:
        return  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç–æ–π, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º

    if not 0 <= index < len(links):
        return  # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º

    if callback_query.data.startswith('forward'):
        index += 1
    elif callback_query.data.startswith('backward'):
        index -= 1

    await send_link(callback_query.message.chat.id, index, links, int(callback_query.data.split('_')[2]),
                    int(callback_query.data.split('_')[3]))


@dp.message_handler(commands=['gdz'])
@dp.message_handler(Text(equals="–û—Ç–∫—Ä—ã—Ç—å –ì–î–ó üìö"))
async def choose_subject(message: types.Message):
    user_class = await check_user_class(message.from_user.id)
    if user_class[0] == 9:
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=class_9_subjects_kb)
    elif user_class[0] == 10:
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=class_10_subjects_kb)
    elif user_class[0] == 11:
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=class_11_subjects_kb)


@dp.callback_query_handler(lambda c: c.data.startswith('subject:'))
async def choose_textbook(callback_query: types.CallbackQuery):
    subject = callback_query.data.split(':')[1]
    user_class = callback_query.data.split(':')[2]
    textbooks = await check_textbooks(user_class, subject)
    keyboard = types.InlineKeyboardMarkup()
    for textbook in textbooks:
        keyboard.add(types.InlineKeyboardButton(textbook[0], callback_data=f'textbook:{textbook[0].rstrip()}'))
    await bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–±–Ω–∏–∫:", callback_query.message.chat.id,
                                callback_query.message.message_id, reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data.startswith('textbook:'))
async def choose_task(callback_query: types.CallbackQuery, state: FSMContext):
    textbook = callback_query.data.split(':')[1]
    await state.update_data(textbook=textbook)
    await bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:", callback_query.message.chat.id,
                                callback_query.message.message_id)
    await GDZStates.choosing_task.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è
@dp.message_handler(state=GDZStates.choosing_task)
async def choosing_task(message: types.Message, state: FSMContext):
    data = await state.get_data()
    textbook = data.get('textbook')
    url = await check_textbook_url(textbook.split()[0], textbook)
    message_text = message.text
    if "." in message_text:
        message_text = message_text.replace(".", "-")
    textbook_url = url[0] + message_text + url[1]
    images = await get_images_url(textbook_url)
    if images:
        for image in images:
            await bot.send_message(chat_id=message.chat.id,
                                   text=image)
        await state.finish()
    else:
        await bot.send_message(chat_id=message.chat.id,
                               text="–ù–µ –Ω–∞—à–ª–æ—Å—Ç—å —Ç–∞–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –Ω–µ–≥–æ.\n"
                                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /cancel
@dp.message_handler(commands=['cancel'], state='*')
async def cancel_translation(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.chat.id,
                           text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 2)

    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
