import logging
import asyncio
import os
import sqlite3

from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ParseMode
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from config import BOT_TOKEN
from functions import text_extract, translate_text

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def check_user(user_id):
    with sqlite3.connect("bot.db") as con:
        cursor = con.cursor()
        cursor.execute('SELECT * FROM users WHERE user_id=?', (user_id,))
        return cursor.fetchone()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def add_user(user_id, user_class):
    with sqlite3.connect("bot.db") as con:
        cursor = con.cursor()
        cursor.execute('INSERT INTO users (user_id, user_class) VALUES (?, ?)', (user_id, user_class))
        con.commit()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def update_user_class(user_id, new_user_class):
    with sqlite3.connect("bot.db") as con:
        cursor = con.cursor()
        cursor.execute('UPDATE users SET user_class=? WHERE user_id=?', (new_user_class, user_id))
        con.commit()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user_id = message.from_user.id
    user_data = await check_user(user_id)

    if not user_data:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = [types.KeyboardButton(text="9"), types.KeyboardButton(text="10"), types.KeyboardButton(text="11")]
        keyboard.add(*buttons)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å:", reply_markup=keyboard)
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [types.KeyboardButton(text="–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç üì∏"), types.KeyboardButton(text="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç üåê")]
    keyboard.add(*buttons)
    buttons = [types.KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å üéí")]
    keyboard.add(*buttons)
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}",
                        reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
@dp.message_handler(lambda message: message.text in ["9", "10", "11"])
async def choose_class(message: types.Message):
    user_id = message.from_user.id
    user_data = await check_user(user_id)

    if not user_data:
        user_class = int(message.text)
        await add_user(user_id, user_class)
        await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í–∞—à –∫–ª–∞—Å—Å {user_class}-—ã–π.")
    else:
        new_class = int(message.text)
        await update_user_class(user_id, new_class)
        await message.answer(f"–í–∞—à –∫–ª–∞—Å—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_class}!")
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [types.KeyboardButton(text="–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç üì∏"), types.KeyboardButton(text="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç üåê")]
    keyboard.add(*buttons)
    buttons = [types.KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å üéí")]
    keyboard.add(*buttons)
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}",
                        reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞
@dp.message_handler(commands=['change_class'])
@dp.message_handler(lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å üéí")
async def change_class(message: types.Message):
    user_id = message.from_user.id
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [types.KeyboardButton(text="9"), types.KeyboardButton(text="10"), types.KeyboardButton(text="11")]
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å:", reply_markup=keyboard)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ
class ScanText(StatesGroup):
    waiting_for_photo = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /scan_text
@dp.message_handler(commands=['scan_text'])
@dp.message_handler(Text(equals="–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç üì∏"))
async def scan_text_button(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton(text="/cancel"))
    await message.reply("–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã —è –º–æ–≥ –µ–≥–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.", reply_markup=keyboard)
    await ScanText.waiting_for_photo.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ
@dp.message_handler(content_types=types.ContentType.PHOTO, state=ScanText.waiting_for_photo)
async def handle_photo(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [types.KeyboardButton(text="–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç üì∏"), types.KeyboardButton(text="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç üåê")]
    keyboard.add(*buttons)
    buttons = [types.KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å üéí")]
    keyboard.add(*buttons)

    user_id = message.from_user.id
    photo = message.photo[-1]
    file_info = await bot.get_file(photo.file_id)
    file_path = file_info.file_path
    file = await bot.download_file(file_path)
    file_name = os.path.join("photos", f"{user_id}.jpg")
    with open(file_name, 'wb') as new_file:
        new_file.write(file.getvalue())
    await message.answer(text_extract(file_name), reply_markup=keyboard)
    await state.finish()


SUPPORTED_LANGUAGES = ["–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "–†—É—Å—Å–∫–∏–π"]


# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /translate
class TranslationStates(StatesGroup):
    choose_source_language = State()
    choose_target_language = State()
    translating = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /translate
@dp.message_handler(commands=['translate'])
@dp.message_handler(Text(equals="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç üåê"))
async def cmd_translate(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    for lang in SUPPORTED_LANGUAGES:
        keyboard.add(types.InlineKeyboardButton(text=lang, callback_data=f"source_language:{lang}"))

    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:", reply_markup=keyboard)
    await TranslationStates.choose_source_language.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
@dp.callback_query_handler(lambda c: c.data.startswith('source_language'), state=TranslationStates.choose_source_language)
async def process_source_language(callback_query: types.CallbackQuery, state: FSMContext):
    source_language = callback_query.data.split(":")[1]
    await state.update_data(source_language=source_language)

    keyboard = types.InlineKeyboardMarkup()
    for lang in SUPPORTED_LANGUAGES:
        keyboard.add(types.InlineKeyboardButton(text=lang, callback_data=f"target_language:{lang}"))

    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id,
                                text="–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:",
                                reply_markup=keyboard)
    await TranslationStates.choose_target_language.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith('target_language'), state=TranslationStates.choose_target_language)
async def process_target_language(callback_query: types.CallbackQuery, state: FSMContext):
    target_language = callback_query.data.split(":")[1]
    await state.update_data(target_language=target_language)

    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id,
                                text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:")
    await TranslationStates.translating.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
@dp.message_handler(state=TranslationStates.translating)
async def process_translation(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        source_language = data.get('source_language')
        target_language = data.get('target_language')

    if not source_language or not target_language:
        await message.reply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await bot.send_message(chat_id=message.chat.id,
                           text=translate_text(message.text, source_language, target_language))
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /cancel
@dp.message_handler(commands=['cancel'], state='*')
async def cancel_translation(message: types.Message, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [types.KeyboardButton(text="–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç üì∏"), types.KeyboardButton(text="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç üåê")]
    keyboard.add(*buttons)
    buttons = [types.KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å üéí")]
    keyboard.add(*buttons)

    await bot.send_message(chat_id=message.chat.id,
                           text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard)
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
